You will be asked to demonstrate your implementation working in practice.
Walk us through your code covering:
- All aspects that you have implemented or utilised
- Any optimisations you made
- Any options you considered that may not be present in code

Mandatory tasks:

1. Create a public Git repository and share the URL with the recruiter.

2. Setup an emulated network device for your program to interact with during the demo.
You will need to interact with this device via Netconf and cli.
Use a Cisco DevNet Sandbox here: https://devnetsandbox.cisco.com/RM/Topology
and set up an instance of "IOS XR Programmability".

3. Write a python program that listens for REST calls and interacts with a network device
[User] ----- HTTP/REST----> [Your Automation Program] ---Netconf/Cli-----> [Device]
For demo you may use Curl, Postman or any client of your choice to hit the app.

3.1 Add your code to the public repo:
- Commit frequently
- Push at least once per day (on days you work on this)
- Do not squash your commits as we are interested in the evolution of this code

3.2 Provide api endpoints to:
- Configure a loopback on the device via Netconf
- Delete a loopback of a device via Netconf

You decide the structure of the api response to the user.
You decide the names of the api endpoints.
You may run your application anywhere of your choosing.

We are not seeking over engineered solutions.

Your code should cover:
- Suitable exception handling
- Test cases
- Suitable useful commenting (e.g. docstrings)
- Meet suitable python coding guidelines/standards (try to identify what standards may be relevant)

You may utilise common python packages:
- netmiko/paramiko/ncclient

Code will be scored on:
- Readability
- How pythonic your code is (utilise useful built-in functions to simplify code)
- Function (does achieve what was requested)
- Reusability (could one easily use it against any other network device of the same make/model)
- Exception Handling
- Conformance to any REST Standards or best practices.

Bonus point tasks:

4. Serve the app behind an httpd endpoint e.g. apache or nginx

5. Create a dockerfile to built an image containing the httpd and api

6. Implement any useful Cl pipeline to run that might help maintain your code quality

7. Provide api endpoints to list all interfaces on a device (including loopbacks) along with their status (eg up/down) via cli

8. Include a ‘dry run’ capability that you can turn on/off so a payload is generated, but not sent to the device.
When this mode is enabled return the generated payload back to the user instead of the target device.
